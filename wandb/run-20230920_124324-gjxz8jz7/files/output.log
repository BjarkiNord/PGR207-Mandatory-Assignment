MLPv3(
  (layer1): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=784, out_features=128, bias=True)
    (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): ReLU()
    (4): Dropout(p=0.5, inplace=False)
  )
  (layer2): Sequential(
    (0): Linear(in_features=128, out_features=64, bias=True)
    (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Dropout(p=0.5, inplace=False)
  )
  (layer3): Sequential(
    (0): Linear(in_features=64, out_features=32, bias=True)
    (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Dropout(p=0.5, inplace=False)
  )
  (layer4): Sequential(
    (0): Linear(in_features=32, out_features=16, bias=True)
    (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Dropout(p=0.5, inplace=False)
  )
  (layer5): Sequential(
    (0): Linear(in_features=16, out_features=10, bias=True)
  )
)
Loss after 03072 examples: 2.15191936
Loss after 06272 examples: 1.98065364
Loss after 09472 examples: 1.70329523
Loss after 12640 examples: 1.55306065
Loss after 15840 examples: 1.34083128
Loss after 19040 examples: 1.21331632
Loss after 22240 examples: 1.18802142
Loss after 25408 examples: 1.21609354
Loss after 28608 examples: 1.22447658
Loss after 31808 examples: 1.47591400
Loss after 35008 examples: 1.25756645
Loss after 38176 examples: 1.07940269
Loss after 41376 examples: 0.95630318
Loss after 44576 examples: 0.98464453
Loss after 47776 examples: 0.98114151
Loss after 50944 examples: 1.15736651
Loss after 54144 examples: 1.02387595
Loss after 57344 examples: 1.00295413
Loss after 60512 examples: 0.97966290
Loss after 63712 examples: 1.07549560
Loss after 66912 examples: 0.88088125
Loss after 70112 examples: 1.07449484
Loss after 73280 examples: 0.95713043
Loss after 76480 examples: 0.85521674
Loss after 79680 examples: 0.79958242
Loss after 82880 examples: 1.02995205
Loss after 86048 examples: 0.81141281
Loss after 89248 examples: 0.84842223
Loss after 92448 examples: 0.96857691
Loss after 95648 examples: 0.97446042
Loss after 98816 examples: 1.06717002
Loss after 102016 examples: 0.84276718
Loss after 105216 examples: 0.96411896
Loss after 108384 examples: 0.84384853
Loss after 111584 examples: 0.81952256
Loss after 114784 examples: 1.01519823
Loss after 117984 examples: 0.88255078
Loss after 121152 examples: 0.88762641
Loss after 124352 examples: 0.91470635
Loss after 127552 examples: 1.04679942
Loss after 130752 examples: 0.93070638
Loss after 133920 examples: 0.90970045
Loss after 137120 examples: 0.67524374
Loss after 140320 examples: 0.82573926
Loss after 143520 examples: 0.92194426
Loss after 146688 examples: 0.81951433
Loss after 149888 examples: 1.05110097
Loss after 153088 examples: 0.97174692
Loss after 156256 examples: 0.89244407
Loss after 159456 examples: 0.91459417
Loss after 162656 examples: 1.01332736
Loss after 165856 examples: 0.89703119
Loss after 169024 examples: 0.95301408
Loss after 172224 examples: 0.77999806
Loss after 175424 examples: 0.69968402
Loss after 178624 examples: 0.68549711
Loss after 181792 examples: 0.97569424
Loss after 184992 examples: 0.86009890
Loss after 188192 examples: 0.74914342
Loss after 191392 examples: 0.89466739
Loss after 194560 examples: 0.81105393
Loss after 197760 examples: 0.76887494
Loss after 200960 examples: 0.90893155
Loss after 204128 examples: 0.81869268
Loss after 207328 examples: 0.82972383
Loss after 210528 examples: 0.71176910
Loss after 213728 examples: 0.80741793
Loss after 216896 examples: 0.84229249
Loss after 220096 examples: 0.85251170
Loss after 223296 examples: 0.92053533
Loss after 226496 examples: 0.84482467
Loss after 229664 examples: 0.77851290
Loss after 232864 examples: 0.66206425
Loss after 236064 examples: 0.67330092
Loss after 239264 examples: 0.72627199
Accuracy of the model on the 2000 test images: 91.400000%
================ Diagnostic Run torch.onnx.export version 2.0.1 ================
verbose: False, log level: Level.ERROR
======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ========================