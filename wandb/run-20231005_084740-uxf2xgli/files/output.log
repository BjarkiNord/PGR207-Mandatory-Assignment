MLPv3(
  (layer1): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=784, out_features=128, bias=True)
    (2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): ReLU()
    (4): Dropout(p=0.25, inplace=False)
  )
  (layer2): Sequential(
    (0): Linear(in_features=128, out_features=64, bias=True)
    (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Dropout(p=0.25, inplace=False)
  )
  (layer3): Sequential(
    (0): Linear(in_features=64, out_features=32, bias=True)
    (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Dropout(p=0.25, inplace=False)
  )
  (layer4): Sequential(
    (0): Linear(in_features=32, out_features=16, bias=True)
    (1): BatchNorm1d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU()
    (3): Dropout(p=0.25, inplace=False)
  )
  (layer5): Sequential(
    (0): Linear(in_features=16, out_features=10, bias=True)
  )
)
Loss after 03072 examples: 1.84059036
Loss after 06272 examples: 1.45749223
Loss after 09472 examples: 1.21090579
Loss after 12640 examples: 0.86458033
Loss after 15840 examples: 0.66130811
Loss after 19040 examples: 0.70745713
Loss after 22240 examples: 0.67382240
Loss after 25408 examples: 0.61021870
Loss after 28608 examples: 0.57110232
Loss after 31808 examples: 0.68327200
Loss after 35008 examples: 0.51804721
Loss after 38176 examples: 0.36285985
Loss after 41376 examples: 0.55813247
Loss after 44576 examples: 0.38607997
Loss after 47776 examples: 0.45502147
Loss after 50944 examples: 0.34975833
Loss after 54144 examples: 0.47322100
Loss after 57344 examples: 0.55499297
Loss after 60512 examples: 0.47773546
Loss after 63712 examples: 0.31627724
Loss after 66912 examples: 0.44056159
Loss after 70112 examples: 0.47899786
Loss after 73280 examples: 0.48006055
Loss after 76480 examples: 0.32005283
Loss after 79680 examples: 0.50980461
Loss after 82880 examples: 0.39062750
Loss after 86048 examples: 0.54029089
Loss after 89248 examples: 0.43059775
Loss after 92448 examples: 0.44873261
Loss after 95648 examples: 0.35063991
Loss after 98816 examples: 0.34437084
Loss after 102016 examples: 0.32138255
Loss after 105216 examples: 0.38531554
Loss after 108384 examples: 0.22965422
Loss after 111584 examples: 0.39680344
Loss after 114784 examples: 0.30622199
Loss after 117984 examples: 0.40436557
Loss after 121152 examples: 0.44464532
Loss after 124352 examples: 0.24940106
Loss after 127552 examples: 0.25681156
Loss after 130752 examples: 0.25642261
Loss after 133920 examples: 0.36019495
Loss after 137120 examples: 0.35507110
Loss after 140320 examples: 0.34098563
Loss after 143520 examples: 0.31151158
Loss after 146688 examples: 0.25544259
Loss after 149888 examples: 0.43388528
Loss after 153088 examples: 0.60447216
Loss after 156256 examples: 0.21563379
Loss after 159456 examples: 0.42750397
Loss after 162656 examples: 0.39968935
Loss after 165856 examples: 0.35169017
Loss after 169024 examples: 0.47282779
Loss after 172224 examples: 0.24826615
Loss after 175424 examples: 0.24395484
Loss after 178624 examples: 0.29562575
Loss after 181792 examples: 0.22641599
Loss after 184992 examples: 0.25315303
Loss after 188192 examples: 0.15249248
Loss after 191392 examples: 0.35772961
Loss after 194560 examples: 0.19191337
Loss after 197760 examples: 0.26829177
Loss after 200960 examples: 0.13704060
Loss after 204128 examples: 0.42642856
Loss after 207328 examples: 0.22182608
Loss after 210528 examples: 0.18729414
Loss after 213728 examples: 0.34471038
Loss after 216896 examples: 0.16312180
Loss after 220096 examples: 0.31754434
Loss after 223296 examples: 0.24008732
Loss after 226496 examples: 0.34771392
Loss after 229664 examples: 0.22353771
Loss after 232864 examples: 0.29558468
Loss after 236064 examples: 0.24805152
Loss after 239264 examples: 0.15299921
Accuracy of the model on the 2000 test images: 95.250000%
================ Diagnostic Run torch.onnx.export version 2.0.1 ================
verbose: False, log level: Level.ERROR
======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ========================